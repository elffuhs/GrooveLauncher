name: Stable APK Build

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 0.5.6-beta.1)'
        required: true
        type: string
      version_code:
        description: 'Version code (integer, e.g., 56)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release with artifacts'
        required: false
        type: boolean
        default: false

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set version variables
        id: version_vars
        run: |
          echo "version_name=${{ github.event.inputs.version_name }}" >> $GITHUB_OUTPUT
          echo "create_release=${{ github.event.inputs.create_release }}" >> $GITHUB_OUTPUT
          echo "Using manual inputs: ${{ github.event.inputs.version_name }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Install Dependencies
        run: npm install

      - name: Update Version Numbers
        run: |
          VERSION_NAME="${{ github.event.inputs.version_name }}"
          VERSION_CODE="${{ github.event.inputs.version_code }}"
          
          echo "Updating version to: $VERSION_NAME (code: $VERSION_CODE)"
          
          # Update package.json
          npm version $VERSION_NAME --no-git-tag-version
          
          # Update grooveMock.js
          sed -i '' "s/version: '[^']*'/version: '$VERSION_NAME'/g" src/scripts/grooveMock.js
          
          # Update build.gradle.kts
          sed -i '' "s/versionName = \"[^\"]*\"/versionName = \"$VERSION_NAME\"/g" android/app/build.gradle.kts
          sed -i '' "s/versionCode = [0-9]*/versionCode = $VERSION_CODE/g" android/app/build.gradle.kts
          
          echo "Version numbers updated successfully"

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > android/app/keystore.jks
          mkdir -p android/app/app
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > android/app/app/keystore.jks
      
      - name: Create local.properties
        env:
          LOCAL_PROPERTIES: ${{ secrets.LOCAL_PROPERTIES }}
        run: |
          echo "$LOCAL_PROPERTIES" > android/gradle.local.properties
          echo "CHANGELOG=Stable release ${{ steps.version_vars.outputs.version_name }}" >> android/gradle.local.properties

      - name: Build Android APKs (WebView & GeckoView)
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASS }}
          KEY_PASSWORD: ${{ secrets.KEYSTORE_PASS }}
        run: |
          npm run build:production
          cd android
          ./gradlew assembleRegularRelease -Pandroid.injected.signing.store.file=app/keystore.jks -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD -Pandroid.injected.signing.key.alias=key0 -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          ./gradlew assembleRegularGeckoViewRelease -Pandroid.injected.signing.store.file=app/keystore.jks -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD -Pandroid.injected.signing.key.alias=key0 -Pandroid.injected.signing.key.password=$KEY_PASSWORD
          cd ..

      - name: List all generated APKs for debugging
        run: |
          echo "Listing all APKs in build directory:"
          find android/app/build/ -name "*.apk" -print

      - name: Rename and Collect APKs for Release
        run: |
          VERSION_NAME="${{ steps.version_vars.outputs.version_name }}"
          # WebView APKs (split by ABI)
          for apk in android/app/build/outputs/apk/regular/release/app-regular-*-release.apk; do
            if [ -f "$apk" ]; then
              arch=$(echo $apk | sed -n 's/.*app-regular-\(.*\)-release.apk/\1/p')
              cp "$apk" "GrooveLauncher_v${VERSION_NAME}_WebView_${arch}.apk"
            fi
          done
          # GeckoView APKs (split by ABI)
          for apk in android/app/build/outputs/apk/regularGeckoView/release/app-regularGeckoView-*-release.apk; do
            if [ -f "$apk" ]; then
              arch=$(echo $apk | sed -n 's/.*app-regularGeckoView-\(.*\)-release.apk/\1/p')
              cp "$apk" "GrooveLauncher_v${VERSION_NAME}_GeckoView_${arch}.apk"
            fi
          done
          
          # List generated release files
          echo "Generated release files:"
          ls -la GrooveLauncher_v${VERSION_NAME}_*.apk

      - name: Create GitHub Release
        if: ${{ steps.version_vars.outputs.create_release == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          VERSION_NAME="${{ steps.version_vars.outputs.version_name }}"
          RELEASE_TAG="v${VERSION_NAME}"
          ASSETS=$(ls GrooveLauncher_v${VERSION_NAME}_*.apk | xargs)
          
          echo "Creating release with tag $RELEASE_TAG"
          gh release create "$RELEASE_TAG" $ASSETS \
            --title "Groove Launcher v${VERSION_NAME}" \
            --notes "## Groove Launcher v${VERSION_NAME}\n\nStable release of Groove Launcher.\n\n### Downloads\n- **WebView**: Standard Android WebView engine\n- **GeckoView**: Mozilla's GeckoView engine\n\n### Architecture Support\n- ARM64 (arm64-v8a) - Recommended for most devices\n- ARMv7 (armeabi-v7a) - Older ARM devices\n- x86_64 - Intel/AMD 64-bit emulators\n- x86 - Intel/AMD 32-bit emulators" \
            --latest
            
      - name: Upload Artifacts (No Release)
        if: ${{ steps.version_vars.outputs.create_release != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: GrooveLauncher-v${{ steps.version_vars.outputs.version_name }}-APKs
          path: GrooveLauncher_v${{ steps.version_vars.outputs.version_name }}_*.apk
          retention-days: 30
          
      - name: Commit and Push Version Changes
        if: ${{ steps.version_vars.outputs.create_release == 'true' }}
        run: |
          VERSION_NAME="${{ steps.version_vars.outputs.version_name }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json src/scripts/grooveMock.js android/app/build.gradle.kts
          git commit -m "Bump version to v${VERSION_NAME}" || echo "No changes to commit"
          git push
          
      - name: Summary
        run: |
          VERSION_NAME="${{ steps.version_vars.outputs.version_name }}"
          echo "üéâ Build completed successfully!"
          echo "üì¶ Version: v${VERSION_NAME}"
          echo "üì± Generated APKs:"
          ls -la GrooveLauncher_v${VERSION_NAME}_*.apk
          
          if [ "${{ steps.version_vars.outputs.create_release }}" = "true" ]; then
            echo "üöÄ GitHub release created: v${VERSION_NAME}"
            echo "üìù Version changes committed and pushed"
          else
            echo "üì¶ APKs uploaded as artifacts (no release created)"
            echo "‚ö†Ô∏è Version changes not committed (create_release was false)"
          fi